/**
 * 题目描述：
 *
 * 班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。
 * 所谓的朋友圈，是指所有朋友的集合。
 *
 * 给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。
 *
 * 示例 1: 
 *
 * 输入: 
 * [[1,1,0],
 *  [1,1,0],
 *  [0,0,1]]
 * 输出: 2 
 * 说明：已知学生0和学生1互为朋友，他们在一个朋友圈。
 * 第2个学生自己在一个朋友圈。所以返回2。
 * 示例 2:
 *
 * 输入: 
 * [[1,1,0],
 *  [1,1,1],
 *  [0,1,1]]
 * 输出: 1
 * 说明：已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。
 * 
 * 思路：
 *（1）根据朋友圈的定义，我们可以发现是找到每个朋友，然后根据当前朋友去继续寻找他们的关系，这是一种有向图，同时也是深度优先遍历
 */
class Solution {
    public int findCircleNum(int[][] M) {
        // 每个人是否加入朋友圈
        boolean [] visited = new boolean [M.length];
        int count = 0;
        // 对每个人
        for(int i=0; i<M.length; i++){
            // 如果没有加入朋友圈
            if(!visited[i]){
                // 去搜索他的朋友圈
                dfs(M, visited, i);
                // 朋友圈个数+1
                count ++;
            }
        }
        return count;
    }
    
    /**
     * 深度优先遍历有向二维矩阵
     */
    public void dfs(int [][] m, boolean [] visited, int i){
        // 对每个人
        for(int j=0; j < m.length; j++){
            // 如果他和第i个人是朋友并且还没有加入其它的朋友圈
            if(m[i][j] == 1 && !visited[j]){
                // 把他加入朋友圈
                visited[j] = true;
                // 以它为中心继续深度优先遍历
                dfs(m, visited, j);
            }
        }
    }
    
}
