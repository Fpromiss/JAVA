/**
 * 题目描述：
 *
 * 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，
 * 这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，
 * 如果两间相邻的房屋在同 一晚上被小偷闯入，系统会自动报警。
 *
 * 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
 *
 * 示例 1:
 *
 * 输入: [2,3,2]
 * 输出: 3
 * 解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
 * 示例 2: 
 *
 * 输入: [1,2,3,1]
 * 输出: 4
 * 解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
 *    偷窃到的最高金额 = 1 + 3 = 4 。
 *
 * 思路
 *（1）动态规划
 *（2）复用打家劫舍1的代码
 *（3）因为是环形灯，所以打破环形即可，所有去掉第一家，去掉最后一家，可以得到两个最大打劫金额，
 * 计算MAX（max1， max2）即为最大的打劫金额，因为第一家和最后一家一定不能同时打劫。
 */
class Solution {
    public int rob(int[] nums) {
         // 判空
        if(nums == null || nums.length == 0){
            return 0;
        }
        // 只有一个数
        if(nums.length == 1){
            return nums[0];
        }
        if(nums.length == 2){
            return Math.max(nums[0], nums[1]);
        }
        int max1 = lineRob(Arrays.copyOfRange(nums,0,nums.length-1));
        int max2 = lineRob(Arrays.copyOfRange(nums,1,nums.length));
        return Math.max(max1, max2);
    }
    
    
    public int lineRob(int[] nums) {
        // 判空
        if(nums == null || nums.length == 0){
            return 0;
        }
        // 只有一个数
        if(nums.length == 1){
            return nums[0];
        }
        int length = nums.length;
        int [] dp = new int[length]; // dp
        // 计算前两家
        dp[0] = nums[0]; 
        dp[1] = Math.max(nums[0], nums[1]);
        // 状态转移
        for(int i=2; i<length; i++){
            dp[i] = Math.max(dp[i-1], nums[i]+dp[i-2]);
        }
        // 返回
        return dp[length-1];
    }
}