/**
 *假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 *每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 *注意：给定 n 是一个正整数。
 *示例 1：
 *输入： 2
 *输出： 2
 *解释： 有两种方法可以爬到楼顶。
 *1.  1 阶 + 1 阶
 *2.  2 阶
 *示例 2：
 *输入： 3
 *输出： 3
 *解释： 有三种方法可以爬到楼顶。
 *1.  1 阶 + 1 阶 + 1 阶
 *2.  1 阶 + 2 阶
 *3.  2 阶 + 1 阶

 *爬到第i个楼梯的方法等于爬到第i-1个楼梯的方法（再爬一步）+第i-2个楼梯的方法（再爬两步）
 */

class Solution {
    public int climbStairs(int n) {
        int []dp = new int [n];
        dp[0]=1;
        if(n>=2){
            dp[1]=2;
        }
        for(int i=2;i<n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n-1];   
    }
}

//可思考=》步长变化：
//=>去判断步长和剩下楼梯个数的关系，然后就和步长1~2一样了
