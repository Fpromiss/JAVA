/**
 * 题目描述：
 *
 * 在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，
 * 因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。
 *
 * 一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，
 * 则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。
 *
 * Example:
 *
 * 输入:
 * [[10,16], [2,8], [1,6], [7,12]]
 *
 * 输出:
 * 2 
 *
 * 解释:
 * 对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。
 *
 * 思路：
 *（1）一支箭至少可以穿一个气球，让他们按照结束区间排序，如果当前结束点比当前比较点的开始区间大，则这个箭可以把当前气球射穿，否则需要换一支箭
 *（2）优化，对于排序可以自己写
 */
class Solution {
    public int findMinArrowShots(int[][] points) {
        if(points == null || points.length == 0){
            return 0;
        }
        // 按照结束位置排序
        Arrays.sort(points, (a, b) -> (a[1] - b[1]));
        int count = 1;
        int place = points[0][1];
        for(int i=1;i<points.length;i++){
            // 如果当前气球开始位置大于一支箭射出去的位置，需要换一支箭
            if(place < points[i][0]){
                count ++;
                place = points[i][1];
            }
        }
        return count;
    }
}
