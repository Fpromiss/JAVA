/**
 * 题目描述
 *
 * 在二维数组grid中，grid[i][j]代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。
 *
 * 最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的“天际线”必须与原始数组的天际线相同。 城市的天际线是从远处观看时，
 * 由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。
 *
 * 建筑物高度可以增加的最大总和是多少？
 *
 * 例子：
 * 输入： grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
 * 输出： 35
 * 解释： 
 * The grid is:
 * [ [3, 0, 8, 4], 
 * [2, 4, 5, 7],
 * [9, 2, 6, 3],
 * [0, 3, 1, 0] ]
 *
 * 从数组竖直方向（即顶部，底部）看“天际线”是：[9, 4, 8, 7]
 * 从水平水平方向（即左侧，右侧）看“天际线”是：[8, 7, 9, 3]
 *
 * 在不影响天际线的情况下对建筑物进行增高后，新数组如下：
 *
 * gridNew = [ [8, 4, 8, 7],
 *            [7, 4, 7, 7],
 *            [9, 4, 8, 7],
 *            [3, 3, 3, 3] ]
 *
 * 思路：
 *（1）找出行列最大值，然后二重循环遍历一遍即可，每个位置可以增加的数目为行列最大值中较小的 - 当前值
 *（2）可优化出：先把天际线算出来存住，避免重复计算
 */
class Solution {
    public int maxIncreaseKeepingSkyline(int[][] grid) {
        int result = 0;
        for(int i=0;i<grid.length;i++){
            int lineMax = getMax(grid[i]);
            for(int j=0;j<grid[i].length;j++){
                int rowMax = getMax(getRow(grid, j));
                result += Math.min(lineMax, rowMax) - grid[i][j];
            }
        }
        return result;
    }
    
    public int [] getRow(int [][] grid, int row){
        int [] res = new int [grid.length];
        for(int i=0;i<grid.length;i++){
            res[i] = grid[i][row];
        }
        return res;
    }
    
    public int getMax(int [] array){
        int max = -1;
        for(int i=0;i<array.length;i++){
            max = max > array[i] ? max : array[i];
        }
        return max;
    }
}
