/**
 *如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果 *存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。
 *例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反,  *[1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二 *个序列是因为它的最后一个差值为零。
 *给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可 *以不删除）元素来获得子序列，剩下的元素保持其原始顺序。
 *示例 1:
 *输入: [1,7,4,9,2,5] 输出: 6 解释: 整个序列均为摆动序列。   
 *示例 2:
 *输入: [1,17,5,10,13,15,10,5,16,8] 输出: 7 解释: 这个序列包含几个长度为 7 摆动序列，其 *中一个可为[1,17,10,13,10,16,8]。
 *示例 3:
 *输入: [1,2,3,4,5,6,7,8,9] 输出: 2
 */

class Solution {
    public int wiggleMaxLength(int[] nums) {
        int length = nums.length;//获取个数
        //如果个数为0 或者1 直接返回个数就是摆动序列长度
        if(length<2){
            return length;
        }
        int up[]=new int [length];//表示位置为i处，方向向上的最长摆动序列长度
        int down[] =new int[length];//表示位置为i处，方向向下的最长摆动序列长度
        up[0]=down[0]=1;//初始第一个长度为1
        //遍历剩余元素
        for(int i=1;i<length;i++){
            //如果当前元素比前一个元素大，那么向上方向的摆动序列长度会等于之前向下方向的摆动序列长度+1；
            //同时向下方向摆动序列长度和之前向下方向摆动序列长度一样
            if(nums[i]>nums[i-1]){
                up[i]= down[i-1]+1;
                down[i]= down[i-1];
            }
            //如果当前元素比前一个元素小，那么向下方向的摆动序列长度会等于之前向上方向的摆动序列长度+1；
            //同时向上方向摆动序列长度和之前向上方向摆动序列长度一样
            else if(nums[i]<nums[i-1]){
                down[i]=up[i-1]+1;
                up[i]=up[i-1];
            }
            //如果当前元素和前一个元素相等，那么向上/向下方向摆动序列长度和前一个相同
            else{
                up[i]=up[i-1];
                down[i]=down[i-1];
            } 
        }
        return Math.max(up[length-1],down[length-1]);
    }
}
